// <auto-generated />
using System;
using API.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace API.Migrations
{
    [DbContext(typeof(Remuner8Context))]
    [Migration("20210512135426_UpdatedCompanyDetails")]
    partial class UpdatedCompanyDetails
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("API.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("API.Models.AssigneeTable", b =>
                {
                    b.Property<int>("Assigneeid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("assigneeid")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AssigneeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("assigneeName");

                    b.HasKey("Assigneeid")
                        .HasName("PK__Assignee__52B4679E1CEB1FA5");

                    b.ToTable("AssigneeTable");
                });

            modelBuilder.Entity("API.Models.Bonus", b =>
                {
                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(19,4)")
                        .HasColumnName("amount");

                    b.Property<string>("BonusName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("bonusName");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int")
                        .HasColumnName("departmentId");

                    b.Property<int>("JobDescriptionId")
                        .HasColumnType("int")
                        .HasColumnName("jobDescriptionId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("JobDescriptionId");

                    b.ToTable("Bonuses");
                });

            modelBuilder.Entity("API.Models.CompanyDetails", b =>
                {
                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("companyId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("address");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("companyName");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("email");

                    b.Property<int>("MaxSalaryDays")
                        .HasColumnType("int")
                        .HasColumnName("maxSalaryDays");

                    b.Property<string>("MobileNumber")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("mobileNumber");

                    b.Property<string>("OfficialPhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("officialPhoneNumber");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(7)
                        .IsUnicode(false)
                        .HasColumnType("varchar(7)")
                        .HasColumnName("postalCode");

                    b.Property<DateTime>("SalaryEndDate")
                        .HasColumnType("date")
                        .HasColumnName("salaryEndDate");

                    b.Property<DateTime>("SalaryStartDate")
                        .HasColumnType("date")
                        .HasColumnName("salaryStartDate");

                    b.Property<string>("WebsiteUrl")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("websiteURL");

                    b.HasKey("CompanyId");

                    b.ToTable("SystemDefaults");
                });

            modelBuilder.Entity("API.Models.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("departmentId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("departmentName");

                    b.HasKey("DepartmentId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("API.Models.EmployeeBiodata", b =>
                {
                    b.Property<string>("EmployeeId")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("employeeId");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("accountNumber");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("address");

                    b.Property<string>("Avatar")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("avatar");

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("bankName");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("countryName");

                    b.Property<DateTime>("DateEmployed")
                        .HasColumnType("date")
                        .HasColumnName("dateEmployed");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("date")
                        .HasColumnName("dateOfBirth");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int")
                        .HasColumnName("departmentId");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("emailAddress");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("firstName");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("char(6)")
                        .HasColumnName("gender")
                        .IsFixedLength(true);

                    b.Property<decimal>("GrossSalary")
                        .HasColumnType("decimal(19,4)")
                        .HasColumnName("grossSalary");

                    b.Property<int>("JobDescriptionId")
                        .HasColumnType("int")
                        .HasColumnName("jobDescriptionId");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("lastName");

                    b.Property<string>("MaritalStatus")
                        .IsRequired()
                        .HasMaxLength(12)
                        .IsUnicode(false)
                        .HasColumnType("char(12)")
                        .HasColumnName("maritalStatus")
                        .IsFixedLength(true);

                    b.Property<decimal>("OtherAllowances")
                        .HasColumnType("decimal(19,4)")
                        .HasColumnName("otherAllowances");

                    b.Property<string>("OtherName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("otherName");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("phoneNumber");

                    b.Property<string>("StateName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("stateName");

                    b.HasKey("EmployeeId")
                        .HasName("PK__Employee__C134C9C1771E4F30");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("JobDescriptionId");

                    b.HasIndex(new[] { "EmailAddress" }, "UQ__Employee__347C3027AEE39C36")
                        .IsUnique();

                    b.HasIndex(new[] { "PhoneNumber" }, "UQ__Employee__4849DA01CAB71A88")
                        .IsUnique();

                    b.ToTable("EmployeeBiodata");
                });

            modelBuilder.Entity("API.Models.EmploymentType", b =>
                {
                    b.Property<int>("EmploymentTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("employmentTypeId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EmploymentName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("employmentName");

                    b.HasKey("EmploymentTypeId");

                    b.HasIndex(new[] { "EmploymentName" }, "UQ__Employme__7E571DB88372C814")
                        .IsUnique();

                    b.ToTable("EmploymentType");
                });

            modelBuilder.Entity("API.Models.JobDescription", b =>
                {
                    b.Property<int>("JobDescriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("jobDescriptionId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("BasicSalary")
                        .HasColumnType("decimal(19,4)")
                        .HasColumnName("basicSalary");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int")
                        .HasColumnName("departmentId");

                    b.Property<decimal>("HousingAllowance")
                        .HasColumnType("decimal(19,4)")
                        .HasColumnName("housingAllowance");

                    b.Property<string>("JobDescriptionName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("jobDescriptionName");

                    b.Property<decimal>("TransportAllowance")
                        .HasColumnType("decimal(19,4)")
                        .HasColumnName("transportAllowance");

                    b.HasKey("JobDescriptionId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("JobDescriptions");
                });

            modelBuilder.Entity("API.Models.LeaveType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Days")
                        .HasColumnType("int")
                        .HasColumnName("days");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<bool>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "UQ__LeaveTyp__72E12F1BF20C58BD")
                        .IsUnique();

                    b.ToTable("LeaveTypes");
                });

            modelBuilder.Entity("API.Models.PayrollAdditionItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(19,4)")
                        .HasColumnName("amount");

                    b.Property<int>("AssigneeId")
                        .HasColumnType("int")
                        .HasColumnName("assigneeId");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("categoryId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "AssigneeId" }, "IX_PayrollAdditionItems_AssigneeTableAssigneeid");

                    b.HasIndex(new[] { "CategoryId" }, "IX_PayrollAdditionItems_PayrollCategoryCategoryId");

                    b.ToTable("PayrollAdditionItems");
                });

            modelBuilder.Entity("API.Models.PayrollAdditionItemsAssignment", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(19,4)");

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<int>("PayrollItemId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("PayrollItemId");

                    b.ToTable("PayrollAdditionItemsAssignment");
                });

            modelBuilder.Entity("API.Models.PayrollCategory", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("categoryId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("categoryName");

                    b.HasKey("CategoryId")
                        .HasName("PK__PayrollC__23CAF1D8676751FC");

                    b.ToTable("PayrollCategories");
                });

            modelBuilder.Entity("API.Models.PayrollDeductionItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(19,4)")
                        .HasColumnName("amount");

                    b.Property<int>("AssigneeId")
                        .HasColumnType("int")
                        .HasColumnName("assigneeId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("AssigneeId");

                    b.ToTable("PayrollDeductionItems");
                });

            modelBuilder.Entity("API.Models.PayrollDeductionItemsAssignment", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(19,4)");

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<int>("PayrollItemId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("PayrollItemId");

                    b.ToTable("PayrollDeductionItemsAssignment");
                });

            modelBuilder.Entity("API.Models.PayrollDefault", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<decimal>("FifthAnnualTaxableIncome")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("FirstAnnualTaxableIncome")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("FourthAnnualTaxableIncome")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("MaxOvertimeHours")
                        .HasColumnType("int");

                    b.Property<int>("MaxWorkingDays")
                        .HasColumnType("int");

                    b.Property<DateTime>("MaximumSalaryPeriod")
                        .HasColumnType("date");

                    b.Property<decimal>("MinTaxPercentage")
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime>("MinimumSalaryPeriod")
                        .HasColumnType("date");

                    b.Property<decimal>("NonTaxableIncome")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Office")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<decimal>("SecondAnnualTaxableIncome")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("SixthAnnualTaxableIncome")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Tax")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<decimal>("ThirdAnnualTaxableIncome")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("PayrollDefaults");
                });

            modelBuilder.Entity("API.Models.PayrollOvertimeItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("name");

                    b.Property<int>("Rateid")
                        .HasColumnType("int")
                        .HasColumnName("rateid");

                    b.HasKey("Id");

                    b.HasIndex("Rateid");

                    b.ToTable("PayrollOvertimeItems");
                });

            modelBuilder.Entity("API.Models.PayrollOvertimeItemsAssignment", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(19,4)");

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<int>("PayrollItemId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("PayrollItemId");

                    b.ToTable("PayrollOvertimeItemsAssignment");
                });

            modelBuilder.Entity("API.Models.PayrollRate", b =>
                {
                    b.Property<int>("RateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("rateId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("RateType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("rateType");

                    b.HasKey("RateId")
                        .HasName("PK__PayrollR__5705EA1446EDB076");

                    b.ToTable("PayrollRates");
                });

            modelBuilder.Entity("API.Models.PayrollTransaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("transactionId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(15,2)")
                        .HasColumnName("balance");

                    b.Property<bool>("Deduction")
                        .HasColumnType("bit")
                        .HasColumnName("deduction");

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("employeeId");

                    b.Property<decimal>("Principal")
                        .HasColumnType("decimal(15,2)")
                        .HasColumnName("principal");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(3,2)")
                        .HasColumnName("rate");

                    b.Property<bool>("Statutory")
                        .HasColumnType("bit")
                        .HasColumnName("statutory");

                    b.Property<DateTime>("TransactionDateTime")
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasColumnName("transactionDateTime");

                    b.HasKey("TransactionId")
                        .HasName("PK__PayrollT__9B57CF7249445F48");

                    b.HasIndex("EmployeeId");

                    b.ToTable("PayrollTransactions");
                });

            modelBuilder.Entity("API.Models.Payslip", b =>
                {
                    b.Property<string>("PayslipId")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("payslipId");

                    b.Property<string>("Date")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("date");

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("employeeId");

                    b.Property<decimal>("NetSalary")
                        .HasColumnType("decimal(19,4)")
                        .HasColumnName("netSalary");

                    b.Property<decimal>("TotalDeductions")
                        .HasColumnType("decimal(19,4)")
                        .HasColumnName("totalDeductions");

                    b.Property<decimal>("TotalEarnings")
                        .HasColumnType("decimal(19,4)")
                        .HasColumnName("totalEarnings");

                    b.HasKey("PayslipId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Payslip");
                });

            modelBuilder.Entity("API.Models.PensionFundAdministration", b =>
                {
                    b.Property<string>("PfaCode")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("pfaCode");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("accountNumber");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("address");

                    b.Property<string>("PfaName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("pfaName");

                    b.HasKey("PfaCode")
                        .HasName("PK__PensionF__056D327AA7859729");

                    b.ToTable("PensionFundAdministration");
                });

            modelBuilder.Entity("API.Models.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<string>("JwtId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("API.Models.Request", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Date")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("API.Models.StatutoryDeduction", b =>
                {
                    b.Property<int>("StatutoryTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("statutoryTypeId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount1")
                        .HasColumnType("decimal(19,4)")
                        .HasColumnName("amount1");

                    b.Property<decimal>("Amount2")
                        .HasColumnType("decimal(19,4)")
                        .HasColumnName("amount2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("employeeId");

                    b.Property<string>("PfaAccountNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("pfaAccountNumber");

                    b.Property<string>("PfaAccountNumber1")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("pfaAccountNumber1");

                    b.Property<string>("PfaCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("pfaCode");

                    b.HasKey("StatutoryTypeId")
                        .HasName("PK__Statutor__8001A5961FCE4767");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("PfaCode");

                    b.ToTable("StatutoryDeductions");
                });

            modelBuilder.Entity("API.Models.Tax", b =>
                {
                    b.Property<int>("TaxId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("taxId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("employeeId");

                    b.Property<decimal>("Paye")
                        .HasColumnType("decimal(19,4)")
                        .HasColumnName("PAYE");

                    b.Property<decimal>("Pension")
                        .HasColumnType("decimal(19,4)")
                        .HasColumnName("pension");

                    b.HasKey("TaxId");

                    b.HasIndex(new[] { "EmployeeId" }, "UQ__Taxes__C134C9C0AE6154C9")
                        .IsUnique();

                    b.ToTable("Taxes");
                });

            modelBuilder.Entity("API.Models.TimeSheet", b =>
                {
                    b.Property<DateTime>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("employeeId");

                    b.Property<TimeSpan>("HoursWorked")
                        .HasColumnType("time(0)")
                        .HasColumnName("hoursWorked");

                    b.Property<TimeSpan>("TimeIn")
                        .HasColumnType("time(0)")
                        .HasColumnName("timeIn");

                    b.Property<TimeSpan>("TimeOut")
                        .HasColumnType("time(0)")
                        .HasColumnName("timeOut");

                    b.HasIndex("EmployeeId");

                    b.ToTable("TimeSheet");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("API.Models.Bonus", b =>
                {
                    b.HasOne("API.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .HasConstraintName("FK__Bonuses__departm__2B3F6F97")
                        .IsRequired();

                    b.HasOne("API.Models.JobDescription", "JobDescription")
                        .WithMany()
                        .HasForeignKey("JobDescriptionId")
                        .HasConstraintName("FK__Bonuses__jobDesc__2C3393D0")
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("JobDescription");
                });

            modelBuilder.Entity("API.Models.EmployeeBiodata", b =>
                {
                    b.HasOne("API.Models.Department", "Department")
                        .WithMany("EmployeeBiodatas")
                        .HasForeignKey("DepartmentId")
                        .HasConstraintName("FK__EmployeeB__depar__3A81B327")
                        .IsRequired();

                    b.HasOne("API.Models.JobDescription", "JobDescription")
                        .WithMany("EmployeeBiodatas")
                        .HasForeignKey("JobDescriptionId")
                        .HasConstraintName("FK__EmployeeB__jobDe__3B75D760")
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("JobDescription");
                });

            modelBuilder.Entity("API.Models.JobDescription", b =>
                {
                    b.HasOne("API.Models.Department", "Department")
                        .WithMany("JobDescriptions")
                        .HasForeignKey("DepartmentId")
                        .HasConstraintName("FK_JobDescriptions_Departments")
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("API.Models.PayrollAdditionItem", b =>
                {
                    b.HasOne("API.Models.AssigneeTable", "Assignee")
                        .WithMany("PayrollAdditionItems")
                        .HasForeignKey("AssigneeId")
                        .HasConstraintName("FK_PayrollAdditionItems_AssigneeTable")
                        .IsRequired();

                    b.HasOne("API.Models.PayrollCategory", "Category")
                        .WithMany("PayrollAdditionItems")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_PayrollAdditionItems_PayrollCategories")
                        .IsRequired();

                    b.Navigation("Assignee");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("API.Models.PayrollAdditionItemsAssignment", b =>
                {
                    b.HasOne("API.Models.EmployeeBiodata", "Employee")
                        .WithMany("PayrollAdditionItemsAssignments")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK_PayrollAdditionItemsAssignment_EmployeeBiodata")
                        .IsRequired();

                    b.HasOne("API.Models.PayrollAdditionItem", "PayrollItem")
                        .WithMany("PayrollAdditionItemsAssignments")
                        .HasForeignKey("PayrollItemId")
                        .HasConstraintName("FK_PayrollAdditionItemsAssignment_PayrollAdditionItems")
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("PayrollItem");
                });

            modelBuilder.Entity("API.Models.PayrollDeductionItem", b =>
                {
                    b.HasOne("API.Models.AssigneeTable", "Assignee")
                        .WithMany("PayrollDeductionItems")
                        .HasForeignKey("AssigneeId")
                        .HasConstraintName("FK_PayrollDeductionItems_AssigneeTable")
                        .IsRequired();

                    b.Navigation("Assignee");
                });

            modelBuilder.Entity("API.Models.PayrollDeductionItemsAssignment", b =>
                {
                    b.HasOne("API.Models.EmployeeBiodata", "Employee")
                        .WithMany("PayrollDeductionItemsAssignments")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK_PayrollDeductionItemsAssignment_EmployeeBiodata")
                        .IsRequired();

                    b.HasOne("API.Models.PayrollDeductionItem", "PayrollItem")
                        .WithMany("PayrollDeductionItemsAssignments")
                        .HasForeignKey("PayrollItemId")
                        .HasConstraintName("FK_PayrollDeductionItemsAssignment_PayrollDeductionItems")
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("PayrollItem");
                });

            modelBuilder.Entity("API.Models.PayrollOvertimeItem", b =>
                {
                    b.HasOne("API.Models.PayrollRate", "Rate")
                        .WithMany("PayrollOvertimeItems")
                        .HasForeignKey("Rateid")
                        .HasConstraintName("FK_PayrollOvertimeItems_PayrollRates")
                        .IsRequired();

                    b.Navigation("Rate");
                });

            modelBuilder.Entity("API.Models.PayrollOvertimeItemsAssignment", b =>
                {
                    b.HasOne("API.Models.EmployeeBiodata", "Employee")
                        .WithMany("PayrollOvertimeItemsAssignments")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK_PayrollOvertimeItemsAssignment_EmployeeBiodata")
                        .IsRequired();

                    b.HasOne("API.Models.PayrollOvertimeItem", "PayrollItem")
                        .WithMany("PayrollOvertimeItemsAssignments")
                        .HasForeignKey("PayrollItemId")
                        .HasConstraintName("FK_PayrollOvertimeItemsAssignment_PayrollOvertimeItems")
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("PayrollItem");
                });

            modelBuilder.Entity("API.Models.PayrollTransaction", b =>
                {
                    b.HasOne("API.Models.EmployeeBiodata", "Employee")
                        .WithMany("PayrollTransactions")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK__PayrollTr__emplo__440B1D61")
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("API.Models.Payslip", b =>
                {
                    b.HasOne("API.Models.EmployeeBiodata", "Employee")
                        .WithMany("Payslips")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK_Payslip_EmployeeBiodata")
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("API.Models.RefreshToken", b =>
                {
                    b.HasOne("API.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("API.Models.StatutoryDeduction", b =>
                {
                    b.HasOne("API.Models.EmployeeBiodata", "Employee")
                        .WithMany("StatutoryDeductions")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK__Statutory__emplo__403A8C7D")
                        .IsRequired();

                    b.HasOne("API.Models.PensionFundAdministration", "PfaCodeNavigation")
                        .WithMany("StatutoryDeductions")
                        .HasForeignKey("PfaCode")
                        .HasConstraintName("FK__Statutory__pfaCo__412EB0B6")
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("PfaCodeNavigation");
                });

            modelBuilder.Entity("API.Models.Tax", b =>
                {
                    b.HasOne("API.Models.EmployeeBiodata", "Employee")
                        .WithOne("Tax")
                        .HasForeignKey("API.Models.Tax", "EmployeeId")
                        .HasConstraintName("FK__Taxes__employeeI__48CFD27E")
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("API.Models.TimeSheet", b =>
                {
                    b.HasOne("API.Models.EmployeeBiodata", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK__TimeSheet__emplo__45F365D3")
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("API.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("API.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("API.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("API.Models.AssigneeTable", b =>
                {
                    b.Navigation("PayrollAdditionItems");

                    b.Navigation("PayrollDeductionItems");
                });

            modelBuilder.Entity("API.Models.Department", b =>
                {
                    b.Navigation("EmployeeBiodatas");

                    b.Navigation("JobDescriptions");
                });

            modelBuilder.Entity("API.Models.EmployeeBiodata", b =>
                {
                    b.Navigation("PayrollAdditionItemsAssignments");

                    b.Navigation("PayrollDeductionItemsAssignments");

                    b.Navigation("PayrollOvertimeItemsAssignments");

                    b.Navigation("PayrollTransactions");

                    b.Navigation("Payslips");

                    b.Navigation("StatutoryDeductions");

                    b.Navigation("Tax");
                });

            modelBuilder.Entity("API.Models.JobDescription", b =>
                {
                    b.Navigation("EmployeeBiodatas");
                });

            modelBuilder.Entity("API.Models.PayrollAdditionItem", b =>
                {
                    b.Navigation("PayrollAdditionItemsAssignments");
                });

            modelBuilder.Entity("API.Models.PayrollCategory", b =>
                {
                    b.Navigation("PayrollAdditionItems");
                });

            modelBuilder.Entity("API.Models.PayrollDeductionItem", b =>
                {
                    b.Navigation("PayrollDeductionItemsAssignments");
                });

            modelBuilder.Entity("API.Models.PayrollOvertimeItem", b =>
                {
                    b.Navigation("PayrollOvertimeItemsAssignments");
                });

            modelBuilder.Entity("API.Models.PayrollRate", b =>
                {
                    b.Navigation("PayrollOvertimeItems");
                });

            modelBuilder.Entity("API.Models.PensionFundAdministration", b =>
                {
                    b.Navigation("StatutoryDeductions");
                });
#pragma warning restore 612, 618
        }
    }
}
